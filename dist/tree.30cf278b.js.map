{"version":3,"sources":["js/tree.js"],"names":["windAngle","minX","maxX","minY","maxY","blinkUpdate","typedText","lastSeed","leaveImage","curContext","width","height","buffer","date","Date","treeScale","growthTime","Branch","parent","x","y","angleOffset","length","growth","windForce","blastForce","angle","random","xB","sin","yB","cos","branchA","TWO_PI","PI","branchB","min","max","setScale","update","growUp","beginPath","moveTo","bezierCurveTo","branchColor","floor","strokeStyle","lineWidth","stroke","render","push","translate","rotate","image","pop","tree","setup","c","createCanvas","windowWidth","windowHeight","P2D","textFont","textSize","back","createGraphics","createNewTree","str","year","month","day","createLeaveImage","drawingContext","scale2","background","color","line","noStroke","fill","beginShape","vertex","bezierVertex","endShape","noFill","bezier","seed","randomSeed","xSize","ySize","draw","hour","keyReleased","keyCode","save","minute"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA,IAAIA,SAAS,GAAG,CAAhB;AACA,IAAIC,IAAJ;AACA,IAAIC,IAAJ;AACA,IAAIC,IAAJ;AACA,IAAIC,IAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,UAAJ,EAAgB;;AAChB,IAAIC,KAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACA,IAAIC,SAAJ;AACA,IAAIC,UAAJ,EAGA;AACA;AACA;;IACMC;AAEJ;AACA;AACA;AACA,kBAAYC,MAAZ,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,WAA1B,EAAuCC,MAAvC,EAA+C;AAAA;;AAC7C,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKP,MAAL,GAAcA,MAAd;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;;AACA,QAAI,KAAKF,MAAL,IAAe,IAAnB,EAAyB;AACvB,WAAKQ,KAAL,GAAa,KAAKR,MAAL,CAAYQ,KAAZ,GAAoBL,WAAjC;AACA,WAAKA,WAAL,GAAmBA,WAAnB;AACD,KAHD,MAGO;AACL,WAAKK,KAAL,GAAaL,WAAb;AACA,WAAKA,WAAL,GAAmB,CAAC,GAAD,GAAOM,MAAM,CAAC,GAAD,CAAhC;AACD;;AAED,SAAKL,MAAL,GAAcA,MAAd;AACA,QAAIM,EAAE,GAAGT,CAAC,GAAGU,GAAG,CAAC,KAAKH,KAAN,CAAH,GAAkBJ,MAA/B;AACA,QAAIQ,EAAE,GAAGV,CAAC,GAAGW,GAAG,CAAC,KAAKL,KAAN,CAAH,GAAkBJ,MAA/B;;AACA,QAAIA,MAAM,GAAG,EAAb,EAAiB;AACf,UAAIA,MAAM,GAAGK,MAAM,CAACL,MAAM,GAAG,EAAV,CAAf,GAA+B,EAAnC,EAAuC;AACrC,aAAKU,OAAL,GAAe,IAAIf,MAAJ,CAAW,IAAX,EAAiBW,EAAjB,EAAqBE,EAArB,EAAyB,CAAC,GAAD,GAAOH,MAAM,CAAC,GAAD,CAAb,IAAuB,KAAKD,KAAL,GAAaO,MAAd,GAAwBC,EAAxB,GAA6B,CAAC,GAAD,GAAOZ,MAApC,GAA6C,CAAC,GAAD,GAAOA,MAA1E,CAAzB,EAA4GA,MAAM,IAAI,MAAMK,MAAM,CAAC,GAAD,CAAhB,CAAlH,CAAf;AACD;;AACD,UAAIL,MAAM,GAAGK,MAAM,CAACL,MAAM,GAAG,EAAV,CAAf,GAA+B,EAAnC,EAAuC;AACrC,aAAKa,OAAL,GAAe,IAAIlB,MAAJ,CAAW,IAAX,EAAiBW,EAAjB,EAAqBE,EAArB,EAAyB,MAAMH,MAAM,CAAC,GAAD,CAAZ,IAAsB,KAAKD,KAAL,GAAaO,MAAd,GAAwBC,EAAxB,GAA6B,CAAC,GAAD,GAAOZ,MAApC,GAA6C,CAAC,GAAD,GAAOA,MAAzE,CAAzB,EAA2GA,MAAM,IAAI,MAAMK,MAAM,CAAC,GAAD,CAAhB,CAAjH,CAAf;AACD;;AACD,UAAI,KAAKQ,OAAL,IAAgB,IAAhB,IAAwB,KAAKH,OAAL,IAAgB,IAA5C,EAAkD;AAChD,aAAKA,OAAL,GAAe,KAAKG,OAApB;AACA,aAAKA,OAAL,GAAe,IAAf;AACD;AACF;;AACDlC,IAAAA,IAAI,GAAGmC,GAAG,CAACR,EAAD,EAAK3B,IAAL,CAAV;AACAC,IAAAA,IAAI,GAAGmC,GAAG,CAACT,EAAD,EAAK1B,IAAL,CAAV;AACAC,IAAAA,IAAI,GAAGiC,GAAG,CAACN,EAAD,EAAK3B,IAAL,CAAV;AACAC,IAAAA,IAAI,GAAGiC,GAAG,CAACP,EAAD,EAAK1B,IAAL,CAAV;AACD,IAGD;AACA;AACA;;;;;6BACSW,WAAW;AAClB,WAAKO,MAAL,IAAeP,SAAf;;AACA,UAAI,KAAKiB,OAAL,IAAgB,IAApB,EAA0B;AACxB,aAAKA,OAAL,CAAaM,QAAb,CAAsBvB,SAAtB;AACA,YAAI,KAAKoB,OAAL,IAAgB,IAApB,EACE,KAAKA,OAAL,CAAaG,QAAb,CAAsBvB,SAAtB;AACH;AACF,MAGD;AACA;AACA;;;;6BACS;AACP,UAAI,KAAKG,MAAL,IAAe,IAAnB,EAAyB;AACvB,aAAKC,CAAL,GAAS,KAAKD,MAAL,CAAYC,CAAZ,GAAgBU,GAAG,CAAC,KAAKX,MAAL,CAAYQ,KAAb,CAAH,GAAyB,KAAKR,MAAL,CAAYI,MAArC,GAA8C,KAAKJ,MAAL,CAAYK,MAAnF;AACA,aAAKH,CAAL,GAAS,KAAKF,MAAL,CAAYE,CAAZ,GAAgBW,GAAG,CAAC,KAAKb,MAAL,CAAYQ,KAAb,CAAH,GAAyB,KAAKR,MAAL,CAAYI,MAArC,GAA8C,KAAKJ,MAAL,CAAYK,MAAnF;AACA,aAAKC,SAAL,GAAiB,KAAKN,MAAL,CAAYM,SAAZ,IAAyB,MAAM,MAAM,KAAKF,MAA1C,IAAoD,KAAKG,UAA1E;AACA,aAAKA,UAAL,GAAkB,CAAC,KAAKA,UAAL,GAAkBI,GAAG,CAAC,KAAKV,CAAL,GAAS,CAAT,GAAanB,SAAd,CAAH,GAA8B,KAA9B,GAAsC,KAAKsB,MAA9D,IAAwE,IAA1F;AACA,aAAKI,KAAL,GAAa,KAAKR,MAAL,CAAYQ,KAAZ,GAAoB,KAAKL,WAAzB,GAAuC,KAAKG,SAA5C,GAAwD,KAAKC,UAA1E;AACD;;AACD,UAAI,KAAKO,OAAL,IAAgB,IAApB,EAA0B;AACxB,aAAKA,OAAL,CAAaO,MAAb;AACA,YAAI,KAAKJ,OAAL,IAAgB,IAApB,EACE,KAAKA,OAAL,CAAaI,MAAb;AACH;AACF,MAED;AACA;AACA;;;;6BACS;AACP,UAAI,KAAKrB,MAAL,IAAe,IAAnB,EAAyB;AACvB,aAAKK,MAAL,GAAca,GAAG,CAAC,KAAKb,MAAL,GAAc,MAAM,KAAKL,MAAL,CAAYK,MAAjC,EAAyC,CAAzC,CAAjB;AACD,OAFD,MAGE,KAAKA,MAAL,GAAca,GAAG,CAAC,KAAKb,MAAL,GAAc,GAAf,EAAoB,CAApB,CAAjB;;AACF,UAAI,KAAKS,OAAL,IAAgB,IAApB,EAA0B;AACxB,aAAKA,OAAL,CAAaQ,MAAb;AACA,YAAI,KAAKL,OAAL,IAAgB,IAApB,EACE,KAAKA,OAAL,CAAaK,MAAb;AACH;AACF,MAGD;AACA;AACA;;;;6BACS;AACP,UAAI,KAAKR,OAAL,IAAgB,IAApB,EAA0B;AACxB,YAAIJ,EAAE,GAAG,KAAKT,CAAd;AACA,YAAIW,EAAE,GAAG,KAAKV,CAAd;;AACA,YAAI,KAAKF,MAAL,IAAe,IAAnB,EAAyB;AACvBU,UAAAA,EAAE,IAAI,CAAC,KAAKT,CAAL,GAAS,KAAKD,MAAL,CAAYC,CAAtB,IAA2B,GAAjC;AACAW,UAAAA,EAAE,IAAI,CAAC,KAAKV,CAAL,GAAS,KAAKF,MAAL,CAAYE,CAAtB,IAA2B,GAAjC;AACD,SAHD,MAGO;AACLQ,UAAAA,EAAE,IAAIC,GAAG,CAAC,KAAKH,KAAL,GAAa,KAAKL,WAAnB,CAAH,GAAqC,KAAKC,MAA1C,GAAmD,GAAzD;AACAQ,UAAAA,EAAE,IAAIC,GAAG,CAAC,KAAKL,KAAL,GAAa,KAAKL,WAAnB,CAAH,GAAqC,KAAKC,MAA1C,GAAmD,GAAzD;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAb,QAAAA,UAAU,CAACgC,SAAX;AACAhC,QAAAA,UAAU,CAACiC,MAAX,CAAkB,KAAKvB,CAAvB,EAA0B,KAAKC,CAA/B;AACAX,QAAAA,UAAU,CAACkC,aAAX,CAAyBf,EAAzB,EAA6BE,EAA7B,EAAiCF,EAAjC,EAAqCE,EAArC,EAAyC,KAAKE,OAAL,CAAab,CAAtD,EAAyD,KAAKa,OAAL,CAAaZ,CAAtE;AACA,YAAIwB,WAAW,GAAGC,KAAK,CAAC,OAAO,KAAKvB,MAAb,CAAvB;AACAb,QAAAA,UAAU,CAACqC,WAAX,GAAyB,SAASF,WAAT,GAAuB,GAAvB,GAA6BA,WAA7B,GAA2C,GAA3C,GAAiDA,WAAjD,GAA+D,GAAxF;AACAnC,QAAAA,UAAU,CAACsC,SAAX,GAAuB,KAAKzB,MAAL,GAAc,CAArC;AACAb,QAAAA,UAAU,CAACuC,MAAX;AACA,aAAKhB,OAAL,CAAaiB,MAAb;AACA,YAAI,KAAKd,OAAL,IAAgB,IAApB,EACE,KAAKA,OAAL,CAAac,MAAb;AACH,OA5BD,MA4BO;AACLC,QAAAA,IAAI;AACJC,QAAAA,SAAS,CAAC,KAAKhC,CAAN,EAAS,KAAKC,CAAd,CAAT;AACAgC,QAAAA,MAAM,CAAC,CAAC,CAAD,GAAK,KAAK1B,KAAX,CAAN;AACA2B,QAAAA,KAAK,CAAC7C,UAAD,EAAa,CAACA,UAAU,CAACE,KAAZ,GAAoB,CAAjC,EAAoC,CAApC,CAAL,CAJK,CAKL;;AACA4C,QAAAA,GAAG;AACJ;AACF;;;;;;AAMH,IAAIC,IAAJ,EAGA;AACA;AACA;;AACA,SAASC,KAAT,GAAiB;AACf,MAAIC,CAAC,GAAGC,YAAY,CAACC,WAAW,GAAG,GAAf,EAAoBC,YAAY,GAAG,GAAnC,EAAwCC,GAAxC,CAApB,CADe,CACmD;;AAClEJ,EAAAA,CAAC,CAACvC,MAAF,CAAS,QAAT;AACAR,EAAAA,KAAK,GAAG,GAAR;AACAC,EAAAA,MAAM,GAAG,GAAT;AACAmD,EAAAA,QAAQ,CAAC,SAAD,CAAR,CALe,CAKM;;AACrBC,EAAAA,QAAQ,CAAC,EAAD,CAAR;AACAC,EAAAA,IAAI,GAAGC,cAAc,CAACvD,KAAD,EAAQC,MAAR,EAAgBkD,GAAhB,CAArB;AACAK,EAAAA,aAAa,CAACC,GAAG,CAACC,IAAI,KAAK,GAAT,GAAeC,KAAK,KAAK,EAAzB,GAA8BC,GAAG,EAAlC,CAAJ,CAAb;AACA9D,EAAAA,UAAU,GAAG+D,gBAAgB,EAA7B;AAEA9D,EAAAA,UAAU,GAAG+D,cAAb,CAXe,CAWc;;AAE7BxD,EAAAA,UAAU,GAAG,CAAb;AACD,EAGD;AACA;AACA;;;AACA,SAASuD,gBAAT,GAA4B;AAC1B,MAAIE,MAAM,GAAG1D,SAAS,GAAG,GAAzB;AACAH,EAAAA,MAAM,GAAGqD,cAAc,CAAC,KAAKQ,MAAN,EAAc,KAAKA,MAAnB,EAA2BZ,GAA3B,CAAvB,CAF0B,CAG1B;;AACAjD,EAAAA,MAAM,CAAC8D,UAAP,CAAkBC,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB;AACA/D,EAAAA,MAAM,CAACoC,MAAP,CAAc,SAAd;AACApC,EAAAA,MAAM,CAACgE,IAAP,CAAY,IAAIH,MAAhB,EAAwB,IAAIA,MAA5B,EAAoC,IAAIA,MAAxC,EAAgD,IAAIA,MAApD;AACA7D,EAAAA,MAAM,CAACiE,QAAP;AACAjE,EAAAA,MAAM,CAACkE,IAAP,CAAY,SAAZ;AACAlE,EAAAA,MAAM,CAACmE,UAAP;AACAnE,EAAAA,MAAM,CAACoE,MAAP,CAAc,IAAIP,MAAlB,EAA0B,IAAIA,MAA9B;AACA7D,EAAAA,MAAM,CAACqE,YAAP,CAAoB,IAAIR,MAAxB,EAAgC,KAAKA,MAArC,EAA6C,IAAIA,MAAjD,EAAyD,KAAKA,MAA9D,EAAsE,IAAIA,MAA1E,EAAkF,KAAKA,MAAvF;AACA7D,EAAAA,MAAM,CAACqE,YAAP,CAAoB,KAAKR,MAAzB,EAAiC,KAAKA,MAAtC,EAA8C,KAAKA,MAAnD,EAA2D,KAAKA,MAAhE,EAAwE,IAAIA,MAA5E,EAAoF,IAAIA,MAAxF;AACA7D,EAAAA,MAAM,CAACsE,QAAP;AACAtE,EAAAA,MAAM,CAACkE,IAAP,CAAY,SAAZ;AACAlE,EAAAA,MAAM,CAACmE,UAAP;AACAnE,EAAAA,MAAM,CAACoE,MAAP,CAAc,IAAIP,MAAlB,EAA0B,IAAIA,MAA9B;AACA7D,EAAAA,MAAM,CAACqE,YAAP,CAAoB,IAAIR,MAAxB,EAAgC,KAAKA,MAArC,EAA6C,IAAIA,MAAjD,EAAyD,KAAKA,MAA9D,EAAsE,IAAIA,MAA1E,EAAkF,KAAKA,MAAvF;AACA7D,EAAAA,MAAM,CAACqE,YAAP,CAAoB,KAAKR,MAAzB,EAAiC,KAAKA,MAAtC,EAA8C,KAAKA,MAAnD,EAA2D,KAAKA,MAAhE,EAAwE,IAAIA,MAA5E,EAAoF,IAAIA,MAAxF;AACA7D,EAAAA,MAAM,CAACsE,QAAP;AACAtE,EAAAA,MAAM,CAACoC,MAAP,CAAc,SAAd;AACApC,EAAAA,MAAM,CAACuE,MAAP;AACAvE,EAAAA,MAAM,CAACwE,MAAP,CAAc,IAAIX,MAAlB,EAA0B,IAAIA,MAA9B,EAAsC,IAAIA,MAA1C,EAAkD,KAAKA,MAAvD,EAA+D,IAAIA,MAAnE,EAA2E,KAAKA,MAAhF,EAAwF,IAAIA,MAA5F,EAAoG,KAAKA,MAAzG,EAtB0B,CAuB1B;;AACA,SAAO7D,MAAP;AACD,EAGD;AACA;AACA;;;AACA,SAASsD,aAAT,CAAuBmB,IAAvB,EAA6B;AAC3B9E,EAAAA,QAAQ,GAAG8E,IAAX;AACAC,EAAAA,UAAU,CAACD,IAAD,CAAV;AACApF,EAAAA,IAAI,GAAGS,KAAK,GAAG,CAAf;AACAR,EAAAA,IAAI,GAAGQ,KAAK,GAAG,CAAf;AACAP,EAAAA,IAAI,GAAGQ,MAAP;AACAP,EAAAA,IAAI,GAAGO,MAAP;AACA4C,EAAAA,IAAI,GAAG,IAAItC,MAAJ,CAAW,IAAX,EAAiBP,KAAK,GAAG,CAAzB,EAA4BC,MAA5B,EAAoCuB,EAApC,EAAwC,GAAxC,CAAP;AACA,MAAIqD,KAAK,GAAG7E,KAAZ;AACA,MAAI8E,KAAK,GAAG7E,MAAZ;AACAI,EAAAA,SAAS,GAAG,GAAZ;;AACA,MAAIwE,KAAK,GAAGC,KAAZ,EAAmB;AACjB,QAAID,KAAK,GAAG,GAAZ,EACExE,SAAS,GAAGwE,KAAK,GAAG,GAApB;AACH,GAHD,MAGO;AACL,QAAIC,KAAK,GAAG,GAAZ,EACEzE,SAAS,GAAGyE,KAAK,GAAG,GAApB;AACH;;AACDjC,EAAAA,IAAI,CAACjB,QAAL,CAAcvB,SAAd;AACAwC,EAAAA,IAAI,CAACpC,CAAL,GAAST,KAAK,GAAG,CAAjB;AACA6C,EAAAA,IAAI,CAACnC,CAAL,GAAST,MAAT;AACAN,EAAAA,WAAW,GAAG,CAAC,CAAf,CArB2B,CAqBT;;AAClBC,EAAAA,SAAS,GAAG,EAAZ;AACD;;AAGD,SAASmF,IAAT,GAAgB;AACdf,EAAAA,UAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;AACA1E,EAAAA,SAAS,IAAI,KAAb;AACAuD,EAAAA,IAAI,CAAC/B,SAAL,GAAiBK,GAAG,CAAC7B,SAAD,CAAH,GAAiB,IAAlC;AACAuD,EAAAA,IAAI,CAAChB,MAAL;;AACA,MAAIvB,UAAU,GAAG0E,IAAI,KAAK,CAA1B,EAA6B;AAC3BnC,IAAAA,IAAI,CAACf,MAAL;AACAxB,IAAAA,UAAU,IAAI,CAAd;AACD;;AACDuC,EAAAA,IAAI,CAACN,MAAL;AACD,EAGD;AACA;AACA;;;AACA,SAAS0C,WAAT,GAAuB;AACrB,UAAQC,OAAR;AAAmB;AACjB,SAAK,EAAL;AAAS;AACT;AACEC,QAAAA,IAAI,CAAC,mBAAmBzB,IAAI,EAAvB,GAA4B,GAA5B,GAAkCC,KAAK,EAAvC,GAA4C,GAA5C,GAAkDC,GAAG,EAArD,GAA0D,GAA1D,GAAgEH,GAAG,CAACuB,IAAI,EAAL,CAAnE,GAA8E,GAA9E,GAAoFvB,GAAG,CAAC2B,MAAM,EAAP,CAAvF,GAAoG,MAArG,CAAJ;AACD;AAJH;AAMD,EAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tree.30cf278b.js","sourceRoot":"..","sourcesContent":["///////////////////////////////////////////////////////////\n// Variable definitions ///////////////////////////////////\n///////////////////////////////////////////////////////////\n\nvar windAngle = 0;\nvar minX;\nvar maxX;\nvar minY;\nvar maxY;\nvar blinkUpdate;\nvar typedText;\nvar lastSeed;\nvar leaveImage;\nvar curContext; // Javascript drawing context (for faster rendering)\nvar width;\nvar height;\nvar buffer;\nvar date = new Date();\nvar treeScale;\nvar growthTime;\n\n\n///////////////////////////////////////////////////////////\n// Class that handles the branches ////////////////////////\n///////////////////////////////////////////////////////////\nclass Branch {\n\n  ///////////////////////////////////////////////////////////\n  // Constructor ////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////\n  constructor(parent, x, y, angleOffset, length) {\n    this.growth = 0;\n    this.windForce = 0;\n    this.blastForce = 0;\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    if (this.parent != null) {\n      this.angle = this.parent.angle + angleOffset;\n      this.angleOffset = angleOffset;\n    } else {\n      this.angle = angleOffset;\n      this.angleOffset = -0.2 + random(0.4);\n    }\n\n    this.length = length;\n    let xB = x + sin(this.angle) * length;\n    let yB = y + cos(this.angle) * length;\n    if (length > 10) {\n      if (length + random(length * 10) > 30) {\n        this.branchA = new Branch(this, xB, yB, -0.1 - random(0.4) + ((this.angle % TWO_PI) > PI ? -1.0 / length : +1.0 / length), length * (0.6 + random(0.3)));\n      }\n      if (length + random(length * 10) > 30) {\n        this.branchB = new Branch(this, xB, yB, 0.1 + random(0.4) + ((this.angle % TWO_PI) > PI ? -1.0 / length : +1.0 / length), length * (0.6 + random(0.3)));\n      }\n      if (this.branchB != null && this.branchA == null) {\n        this.branchA = this.branchB;\n        this.branchB = null;\n      }\n    }\n    minX = min(xB, minX);\n    maxX = max(xB, maxX);\n    minY = min(yB, minY);\n    maxY = max(yB, maxY);\n  }\n\n\n  ///////////////////////////////////////////////////////////\n  // Set scale //////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////\n  setScale(treeScale) {\n    this.length *= treeScale;\n    if (this.branchA != null) {\n      this.branchA.setScale(treeScale);\n      if (this.branchB != null)\n        this.branchB.setScale(treeScale);\n    }\n  }\n\n\n  ///////////////////////////////////////////////////////////\n  // Update /////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////\n  update() {\n    if (this.parent != null) {\n      this.x = this.parent.x + sin(this.parent.angle) * this.parent.length * this.parent.growth;\n      this.y = this.parent.y + cos(this.parent.angle) * this.parent.length * this.parent.growth;\n      this.windForce = this.parent.windForce * (1.0 + 5.0 / this.length) + this.blastForce;\n      this.blastForce = (this.blastForce + sin(this.x / 2 + windAngle) * 0.005 / this.length) * 0.98;\n      this.angle = this.parent.angle + this.angleOffset + this.windForce + this.blastForce;\n    }\n    if (this.branchA != null) {\n      this.branchA.update();\n      if (this.branchB != null)\n        this.branchB.update();\n    }\n  }\n\n  ///////////////////////////////////////////////////////////\n  // growUp /////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////\n  growUp() {\n    if (this.parent != null) {\n      this.growth = min(this.growth + 0.1 * this.parent.growth, 1);\n    } else\n      this.growth = min(this.growth + 0.1, 1);\n    if (this.branchA != null) {\n      this.branchA.growUp();\n      if (this.branchB != null)\n        this.branchB.growUp();\n    }\n  }\n\n\n  ///////////////////////////////////////////////////////////\n  // Render /////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////\n  render() {\n    if (this.branchA != null) {\n      let xB = this.x;\n      let yB = this.y;\n      if (this.parent != null) {\n        xB += (this.x - this.parent.x) * 0.4;\n        yB += (this.y - this.parent.y) * 0.4;\n      } else {\n        xB += sin(this.angle + this.angleOffset) * this.length * 0.3;\n        yB += cos(this.angle + this.angleOffset) * this.length * 0.3;\n      }\n      /* PROCESSING WAY (slow)*/\n      // stroke(floor(1100/this.length));\n      // strokeWeight(this.length/5);\n      // beginShape();\n      // vertex(this.x, this.y);\n      // bezierVertex(xB, yB, xB, yB, this.branchA.x, this.branchA.y);\n      // endShape();\n\n      curContext.beginPath();\n      curContext.moveTo(this.x, this.y);\n      curContext.bezierCurveTo(xB, yB, xB, yB, this.branchA.x, this.branchA.y);\n      let branchColor = floor(1100 / this.length);\n      curContext.strokeStyle = \"rgb(\" + branchColor + \",\" + branchColor + \",\" + branchColor + \")\";\n      curContext.lineWidth = this.length / 5;\n      curContext.stroke();\n      this.branchA.render();\n      if (this.branchB != null)\n        this.branchB.render();\n    } else {\n      push();\n      translate(this.x, this.y);\n      rotate(-1 * this.angle);\n      image(leaveImage, -leaveImage.width / 2, 0);\n      // image(leaveImage, 10, 0);\n      pop();\n    }\n  }\n\n\n}\n\n\nvar tree;\n\n\n///////////////////////////////////////////////////////////\n// Init ///////////////////////////////////////////////////\n///////////////////////////////////////////////////////////\nfunction setup() {\n  let c = createCanvas(windowWidth / 1.1, windowHeight / 1.1, P2D); // Set screen size & renderer\n  c.parent('myTree')\n  width = 500;\n  height = 500;\n  textFont(\"Verdana\"); // Create font\n  textSize(24);\n  back = createGraphics(width, height, P2D);\n  createNewTree(str(year() * 365 + month() * 30 + day()));\n  leaveImage = createLeaveImage();\n\n  curContext = drawingContext; // Get javascript drawing context\n\n  growthTime = 0;\n}\n\n\n///////////////////////////////////////////////////////////\n// Create leave image /////////////////////////////////////\n///////////////////////////////////////////////////////////\nfunction createLeaveImage() {\n  let scale2 = treeScale / 1.5;\n  buffer = createGraphics(12 * scale2, 18 * scale2, P2D);\n  // buffer.beginDraw();\n  buffer.background(color(0, 0, 0, 0));\n  buffer.stroke(\"#5d6800\");\n  buffer.line(6 * scale2, 0 * scale2, 6 * scale2, 6 * scale2);\n  buffer.noStroke();\n  buffer.fill(\"#749600\");\n  buffer.beginShape();\n  buffer.vertex(6 * scale2, 6 * scale2);\n  buffer.bezierVertex(0 * scale2, 12 * scale2, 0 * scale2, 12 * scale2, 6 * scale2, 18 * scale2);\n  buffer.bezierVertex(12 * scale2, 12 * scale2, 12 * scale2, 12 * scale2, 6 * scale2, 6 * scale2);\n  buffer.endShape();\n  buffer.fill(\"#8bb800\");\n  buffer.beginShape();\n  buffer.vertex(6 * scale2, 9 * scale2);\n  buffer.bezierVertex(0 * scale2, 13 * scale2, 0 * scale2, 13 * scale2, 6 * scale2, 18 * scale2);\n  buffer.bezierVertex(12 * scale2, 13 * scale2, 12 * scale2, 13 * scale2, 6 * scale2, 9 * scale2);\n  buffer.endShape();\n  buffer.stroke(\"#659000\");\n  buffer.noFill();\n  buffer.bezier(6 * scale2, 9 * scale2, 5 * scale2, 11 * scale2, 5 * scale2, 12 * scale2, 6 * scale2, 15 * scale2);\n  // buffer.endDraw();\n  return buffer;\n}\n\n\n///////////////////////////////////////////////////////////\n// Create new tree ////////////////////////////////////////\n///////////////////////////////////////////////////////////\nfunction createNewTree(seed) {\n  lastSeed = seed;\n  randomSeed(seed);\n  minX = width / 2;\n  maxX = width / 2;\n  minY = height;\n  maxY = height;\n  tree = new Branch(null, width / 2, height, PI, 110);\n  let xSize = width;\n  let ySize = height;\n  treeScale = 0.5;\n  if (xSize < ySize) {\n    if (xSize > 300)\n      treeScale = xSize / 600;\n  } else {\n    if (ySize > 300)\n      treeScale = ySize / 600;\n  }\n  tree.setScale(treeScale);\n  tree.x = width / 2;\n  tree.y = height;\n  blinkUpdate = -1; // Set/reset variables\n  typedText = \"\";\n}\n\n\nfunction draw() {\n  background(0, 0, 0);\n  windAngle += 0.003;\n  tree.windForce = sin(windAngle) * 0.02;\n  tree.update();\n  if (growthTime < hour() * 5) {\n    tree.growUp();\n    growthTime += 1;\n  }\n  tree.render();\n}\n\n\n///////////////////////////////////////////////////////////\n// Compute text input /////////////////////////////////////\n///////////////////////////////////////////////////////////\nfunction keyReleased() {\n  switch (keyCode) { // Compute Non-ASCII key input\n    case 83: // Save tree\n    {\n      save(\"Tree_Everyday_\" + year() + \"_\" + month() + \"_\" + day() + \"_\" + str(hour()) + \":\" + str(minute()) + \".png\");\n    }\n  }\n}\n\n\n//\n// function setup() {\n//   let c = createCanvas(400, 400);\n//   c.parent('myTree');\n//   background(255, 0, 0);\n// }\n//\n// function draw() {\n// }\n"]}